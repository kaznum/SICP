;; From Text
(define (true? x) (not (eq? x false)))
(define (false? x) (eq? x false))

(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-paramters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))

(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
  (cons variables values))

(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
	  (error "Too many arguments applied" vars vals)
	  (error "Too few arguments applied" vars vals))))

;;; Answer

(define (env-loop var proc-null proc-found env)
  (define (scan vars vals)
    (cond ((null? vars)
	   (proc-null env))
	  ((eq? var (car vars))
	   (proc-found vals))
	  (else (scan-and-set (cdr vars) (cdr vals)))))
  (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
	(scan (frame-variables frame)
	      (frame-values frame)))))
  
(define (lookup-variable-value var env)
  (define (proc-null env)
    (env-loop var proc-null proc-found (enclosing-environment env)))
  (define proc-found car)
  (env-loop var proc-null proc-found env))

(define (set-variable-value! var val env)
  (define (proc-null env)
    (env-loop var proc-null proc-found (enclosing-environment env)))
  (define (proc-found vals)
    (set-car! vals val))
  (env-loop var proc-null proc-found env))

(define (define-variable! var val env)
  (define (proc-null env)
    (add-bind-to-frame! var val (first-frame env)))
  (define (proc-found vals)
     (set-car! vals val))
  (env-loop var proc-null proc-found env))
