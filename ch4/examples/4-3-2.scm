(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member? (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (let ((baker (amd 1 2 3 4 5))
        (cooper (amd 1 2 3 4 5))
        (fletcher (amd 1 2 3 4 5))
        (miller (amd 1 2 3 4 5))
        (smith (amd 1 2 3 4 5)))
    (require (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 1)))
    (require (not (= fletcher 5)))
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- cooper fletcher)) 1)))
    (list ('baker baker)
          ('cooper cooper)
          ('fletcher fletcher)
          ('miller miller)
          ('smith smith))))

